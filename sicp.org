#+TITLE: Struktur und Interpretation von Computerprogrammen Arbeitsblatt

[[https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/index.htm][MiT SICP Online Course]]
[[http://community.schemewiki.org/?SICP-Solutions][SICP Solutions]]
[[https://www.youtube.com/playlist?list=PLVFrD1dmDdvdvWFK8brOVNL7bKHpE-9w0][Code Report SICP Work Through]]


* Übungen
** 1.1
#+begin_src clojure
10 ;; => 10
(+ 5 3 4) ;; => 12
( - 9 1) ;; => 8
(/ 6 2) ;; => 3
(+ (* 2 4) ( - 4 6)) ;; => 6
(def a 3) ;; => #'user/a
(def b (+ a 1)) ;; => #'user/b
(+ a b ( * a b)) ;; => 19
(= a b) ;; => false
(if (and (> b a) b (* a b))
  b
  a) ;; => 4
(cond 
  (= a 4) 6
  (= b 4) (+ 6 7 a)
  :else 25 ) ;; => 16
(+ 2 (if (> b a) b a)) ;; => 6
(* (cond (> a b) a
         (< a b) b
         :else -1)
   (+ a 1) ) ;; => 16
#+end_src

** 1.2 Übertragung in die Präfixform
#+begin_src clojure
(/(+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
(* 3 (- 6 2) (- 2 7))) ;; => -37/150
#+end_src
** 1.3

|  a |  b |  c |
|  5 | 10 | 15 |
| 10 |  5 | 15 |
| 10 | 15 |  5 |

#+begin_src clojure
(defn square [x](* x x)) ;; => #'user/square

(defn squareSum [a b]
  (+ (square a) (square b))) ;; => #'user/squareSum
;;
(defn f [a b c]
  (cond
    (and (> a b) (> b c)) (squareSum a b)
    (and (> b a) (> c a)) (squareSum b c)
    :else (squareSum a c)
    )) ;; => #'user/f
(f 5 10 15) ;; => 325
(f 15 10 5) ;; => 325
(f 15 5 10) ;; => 325
#+end_src
